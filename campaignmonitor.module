<?php

/**
 * @file
 * Module that plugs in Campaign Monitor functionality to your Drupal web site.
 * For Campaign Monitor information see: http://www.campaignmonitor.com/
 *
 * This module uses the CampaignMonitor PHP API. For all credit and information
 * about this PHP API see By ssherriff: http://code.google.com/p/campaignmonitor-php/
 */
define('CM_SUBSCRIPTION_SUCCESS', t('You have been successfully subscribed to %list.'));
define('CM_SUBSCRIPTION_ERROR', t('We were unable to subscribe you at this time. Please try again later.'));
define('CM_UNSUBSCRIPTION_SUCCESS', t('You have been successfully unsubscribed.'));
define('CM_UNSUBSCRIPTION_ERROR', t('We were unable to unsubscribe you at this time. Please try again later.'));
define('CM_ERROR', t('There is an error with the newsletter server. Please try again later'));

define('CM_CHECKBOX_DISPLAY_TEXT_DEFAULT', t('Available Newsletters'));
define('CM_USERPAGE_DISPLAY_TEXT_DEFAULT', t('Available Newsletters'));
define('CM_CONNECTION_TIMEOUT_DEFAULT', 15);

define('CM_API_KEY', 'campaignmonitor_api_key');
define('CM_CLIENT_ID', 'campaignmonitor_client_id');
define('CM_DISPLAY_ON', 'campaignmonitor_display_on');
define('CM_CHECKBOX_DISPLAY_TEXT', 'campaignmonitor_checkboxdisplaytext');
define('CM_USERPAGE_DISPLAY_TEXT', 'campaignmonitor_userpagedisplaytext');
define('CM_PAST_CAMPAIGN_URL', 'campaignmonitor_pastcampaignurl');
define('CM_CONNECTION_TIMEOUT', 'campaignmonitor_connection_timeout');
define('CM_LISTS', 'campaignmonitor_lists');
define('CM_LISTS_CF', 'campaignmonitor_lists_customfields');

/**
 * Implementation of hook_help().
 */
function campaignmonitor_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/campaignmonitor':
      return '<p>' . t('Use your API key and other keys to have users register for a mailing list setup through Campaign Monitor.') . '</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function campaignmonitor_permission() {
  return array(
    'administer campaignmonitor' => array(
      'title' => t('Administer Campaign Monitor'),
      'description' => t('Administer Campaign Monitor settings.'),
    ),
    'access archive' => array(
      'title' => t('Access newsletter archive'),
      'description' => t('Access newsletter achives'),
    ),
    'join newsletter' => array(
      'title' => t('Join newsletters'),
      'description' => t('Join newsletters'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function campaignmonitor_menu() {
  $items = array();

  $items['admin/config/services/campaignmonitor'] = array(
    'title' => 'Campaign Monitor',
    'description' => 'General Campaign Monitor settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_general'),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/campaignmonitor.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/general'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'General',
    'weight' => -50,
  );

  $items['admin/config/services/campaignmonitor/lists'] = array(
    'title' => 'Lists',
    'page callback' => 'campaignmonitor_admin_settings_lists',
    'access arguments' => array('administer campaignmonitor'),
    'weight' => -40,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/lists/%/edit'] = array(
    'title' => 'Edit list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_list_edit', 5),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/states'] = array(
    'title' => 'Statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_stats'),
    'access arguments' => array('administer campaignmonitor'),
    'weight' => -30,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaignmonitor_stats.admin.inc',
  );


  $items['campaignmonitor/archive'] = array(
    'title' => 'Newsletter Archive',
    'page callback' => 'campaignmonitor_newsletter_archive',
    'access arguments' => array('access archive'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['user/%user/newsletters'] = array(
    'title' => 'My Newsletters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_user_page_form'),
    'access callback' => 'campaignmonitor_user_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaignmonitor.user_page.inc',
    'weight' => 5,
  );

  return $items;
}

/**
 * Access callback for the user newsletters page.
 */
function campaignmonitor_user_page_access($account) {
  global $user;
  $display_on = variable_get(CM_DISPLAY_ON, array());
  if ($display_on['userpage'] && $user->uid && $user->uid == $account->uid && user_access('join newsletter')) {
    return TRUE;
  }
  return FALSE;
}

/*
 * Implements hook_block_info().
 */
function campaignmonitor_block_info() {
  $blocks = array();

  $lists = campaignmonitor_get_available_lists();
  foreach ($lists as $list_id => $list) {
    // If list==0 that means that list is not chosen, don't create a block.
    if ($list) {
      $blocks[$list_id] = array(
        'info' => t('Subscribe to @list_name', array('@list_name' => $list->name)),
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function campaignmonitor_block_view($delta) {
  $block = array();

  // Get list
  $lists = campaignmonitor_get_available_lists();
  $block['subject'] = $lists[$delta]->name;
  $block['content'] = drupal_get_form('campaignmonitor_subscribe_form', $delta);
  
  //theme('campaignmonitor_block_content', $delta);

  return $block;
}

/**
 * Builds the subscription form used in blocks.
 */
function campaignmonitor_subscribe_form($form, &$form_state, $list_id) {
  global $user;
  $name = '';
  $email = '';
  $subscriber_custom_fields = array();

  // Get lists form campaign monitor (or the local cache).
  $lists = campaignmonitor_get_available_lists();
  $list = $lists[$list_id];
  
  // Try to get e-mail address from the user object.
  if ($user->uid != 0) {
    $email = $user->mail;
  }

  // Try to field out the name field, if it's to be displayed.
  if ($list->displayname) {
    $name = token_replace($list->namekey);

    if (!empty($email) && _campaignmonitor_is_subscribed(variable_get(CM_API_KEY, ''), $list_id, $email)) {
      // Also if subscribed get name
      $subscriber = _campaignmonitor_get_subscriber(variable_get(CM_API_KEY, ''), $list_id, $email);
      $name = isset($subscriber['name']) ? $subscriber['name'] : $name;
    }

    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#size' => 20,
      '#maxlength' => 50,
      '#required' => TRUE,
      '#default_value' => $name,
    );
  }

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 20,
    '#maxlength' => 100,
    '#required' => TRUE,
    '#default_value' => $email,
  );

  $custom_fields = _campaignmonitor_get_custom_fields(variable_get(CM_API_KEY, ''), $list_id);
  foreach ($custom_fields as $field) {
    $key = str_replace(array('[', ']'), '', $field['Key']);

    $saved_cfs = $list->customfields;
    $display_cf = FALSE;
    if ($saved_cfs == NULL) { // case that upgraded and haven't gone to admin page yet, make sure to display as that would keep same behavior
      $display_cf = TRUE;
    }
    else {
      $saved_cf = $saved_cfs[$key];
      $display_cf = $saved_cf->display;
    }

    if ($display_cf) {
      switch ($field['DataType']) {
        case 'Text':
          $form[$key] = array(
            '#type' => 'textfield',
            '#title' => t($field['FieldName']),
            '#size' => 20,
            '#maxlength' => 100,
            '#default_value' => isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '',
          );
          break;

        case 'MultiSelectOne':
          $options = array();
          foreach ($field['FieldOptions']['string'] as $option) {
            $options[$option] = $option;
          }

          $_defaultvalue = isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '';
          if (empty($_defaultvalue)) {
            $defaultvalue = '';
          }
          else {
            $defaultvalue = $_defaultvalue;
          }

          $form[$key] = array(
            '#type' => 'select',
            '#title' => t($field['FieldName']),
            '#options' => $options,
            '#default_value' => $defaultvalue,
          );        
          break;
        
        case 'MultiSelectMany':
          $options = array();
          foreach ($field['FieldOptions']['string'] as $option) {
            $options[$option] = $option;
          }

          $_defaultvalues = isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '';
          if (empty($_defaultvalues)) {
            $defaultvalues = array();
          }
          elseif (!is_array($_defaultvalues)) {
            $defaultvalues = array();
            $defaultvalues[] = $_defaultvalues;
          }
          else {
            $defaultvalues = array();
            foreach ($_defaultvalues as $dv) {
              $defaultvalues[] = $dv;
            }
          }
          $form[$key] = array(
            '#type' => 'checkboxes',
            '#title' => t($field['FieldName']),
            '#options' => $options,
            '#default_value' => $defaultvalues,
          );
          break;

        case 'Number':
          $form[$key] = array(
            '#type' => 'textfield',
            '#title' => t($field['FieldName']),
            '#size' => 20,
            '#maxlength' => 100,
            '#default_value' => isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '',
          );
          break;
      }
    }
  }

  // Add archive link.
  $past_campaign_url = variable_get(CM_PAST_CAMPAIGN_URL, FALSE);
  if (user_access('access archive') && $past_campaign_url) {
    $form['archive_link'] = array(
      '#markup' => l(t('Newsletter Archive'), 'campaignmonitor/archive'),
    );
  }

  $form['list_id'] = array(
    '#type' => 'hidden',
    '#value' => $list_id,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;
}

/**
 * Subscription form submit handler.
 */
function campaignmonitor_subscribe_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];

  // Replace api_key with your own details
  $api_key = variable_get(CM_API_KEY, '');

  $list_id = $form_values['list_id'];
  $name = check_plain($form_values['name']);
  $email = check_plain($form_values['email']);
  $custom_field_array = array();

  $lists = campaignmonitor_get_available_lists();
  $list = $lists[$list_id];

  // any cases other then these are when things are unchanged
  if (!isset($form_values['unsubscribe_newsletter'])) {
    // this is the case where they now want to be subscribed, and weren't before
    $custom_fields = _campaignmonitor_get_custom_fields($api_key, $list_id);
    foreach ($custom_fields as $field) {
      $key = str_replace(array('[', ']'), '', $field['Key']);

      $saved_cfs = $list->customfields;
      $display_cf = FALSE;
      if ($saved_cfs == NULL) { // case that upgraded and haven't gone to admin page yet, make sure to display as that would keep same behavior
        $display_cf = TRUE;
      }
      else {
        $saved_cf = $saved_cfs[$key];
        $display_cf = $saved_cf->display;
      }

      if ($display_cf) {
        $custom_field_array[$field['FieldName']] = $form_values[$key];
      }
    }

    _campaignmonitor_add_subscriber($api_key, $list_id, $name, $email, $custom_field_array);
  }
  else {
    // This is the case where they don't want to be subscribed, and were before
    _campaignmonitor_remove_subscriber($api_key, $list_id, $email);
  }
}

/**
 * Implements newsletter archive menu callback function.
 */
function campaignmonitor_newsletter_archive() {
  $url = variable_get(CM_PAST_CAMPAIGN_URL, '');
  if ($url == '') {
    $content = '<p>' . t('The past campaign URL has not been set. Please set this in the administration pages.') . '</p>';
  }
  else {
    $content = '<script type="text/javascript" src="' . variable_get(CM_PAST_CAMPAIGN_URL, '') . '"></script>';
  }
  return $content;
}