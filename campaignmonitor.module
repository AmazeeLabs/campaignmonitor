<?php

/**
 * @file
 * Module that plugs in Campaign Monitor functionality to your Drupal web site.
 * For Campaign Monitor information see: http://www.campaignmonitor.com/
 */

define('CAMPAIGNMONITOR_ARCHIVE_DELTA', 'HASHc32bde51684d37a36679301a1e9');

/**
 * Implements hook_help().
 */
function campaignmonitor_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/campaignmonitor':
      return '<p>' . t('Use your API key and other keys to have users register for a mailing list setup through Campaign Monitor.') . '</p>';
  }
}

/**
 * Implements hook_perm().
 */
function campaignmonitor_permission() {
  return array(
    'administer campaignmonitor' => array(
      'title' => t('Administer Campaign Monitor'),
      'description' => t('Administer Campaign Monitor settings.'),
    ),
    'access archive' => array(
      'title' => t('Access newsletter archive'),
      'description' => t('Access newsletter achives'),
    ),
    'join newsletter' => array(
      'title' => t('Join newsletters'),
      'description' => t('Join newsletters'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function campaignmonitor_menu() {
  $items = array();

  $items['admin/config/services/campaignmonitor'] = array(
    'title' => 'Campaign Monitor',
    'description' => 'General Campaign Monitor settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_general'),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/campaignmonitor.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/general'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'General',
    'weight' => -50,
  );

  $items['admin/config/services/campaignmonitor/lists'] = array(
    'title' => 'Lists',
    'page callback' => 'campaignmonitor_admin_settings_lists',
    'access arguments' => array('administer campaignmonitor'),
    'weight' => -40,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/lists/add'] = array(
    'title' => 'Add list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_list_create_form'),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/lists/%/edit'] = array(
    'title' => 'Edit list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_list_edit', 5),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/lists/%/delete'] = array(
    'title' => 'Edit list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_list_delete', 5),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/lists/%/enable'] = array(
    'title' => 'Edit list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_list_enable', 5),
    'access arguments' => array('administer campaignmonitor'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/campaignmonitor_lists.admin.inc',
  );

  $items['admin/config/services/campaignmonitor/states'] = array(
    'title' => 'Statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaignmonitor_admin_settings_stats'),
    'access arguments' => array('administer campaignmonitor'),
    'weight' => -30,
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/campaignmonitor_stats.admin.inc',
  );

  return $items;
}

/*
 * Implements hook_block_info().
 */
function campaignmonitor_block_info() {
  $blocks = array();

  $account = variable_get('campaignmonitor_account', FALSE);
  if ($account) {
    // Create a block for each list.
    $lists = CampaignMonitor::getConnector()->getLists();
    if ($lists) {
      foreach ($lists as $list_id => $list) {
        // If list==0 that means that list is not chosen, don't create a block.
        if ($list) {
          $blocks[$list_id] = array(
            'info' => t('Subscribe to @list_name', array('@list_name' => $list['name'])),
          );
        }
      }
    }

    $settings = variable_get('campaignmonitor_general', FALSE);
    if ($settings && isset($settings['archive'])) {
      $blocks[CAMPAIGNMONITOR_ARCHIVE_DELTA] = array(
        'info' => t('Campaign monitor newsletter archive'),
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function campaignmonitor_block_view($delta) {
  $block = array();

  if (CAMPAIGNMONITOR_ARCHIVE_DELTA == $delta) {
    // Connect to campaign monitor and get past campaigns.
    $campaigns = CampaignMonitor::getConnector()->getCampaigns();
    if ($campaigns) {
      $content = '<ul>';
      foreach ($campaigns as $campaign) {
        $content .= '<li>' . l($campaign['Name'], $campaign['Link'] ) . ' ' . format_date($campaign['Sent'], 'short') . '</li>';
      }
      $content .= '</ul>';

      // Build block.
      $block['subject'] = t('Newsletter archive');
      $block['content'] = array('#markup' => $content);
    }
    else {
      drupal_set_message(t('Unable to fetch campaigns from Campaign monitor.'), 'error');
    }
  }
  else {
    // Get lists form Campaign Monitor.
    $lists = CampaignMonitor::getConnector()->getLists();
    $block['subject'] = t($lists[$delta]['name']);
    $block['content'] = drupal_get_form('campaignmonitor_subscribe_form', $delta);

    // Add some basic styling of form elements.
    drupal_add_css(drupal_get_path('module', 'campaignmonitor') . '/css/campaignmonitor.theme.css');
  }

  return $block;
}

/**
 * Builds the subscription form used in blocks.
 */
function campaignmonitor_subscribe_form($form, &$form_state, $list_id) {
  global $user;

  // Get campaign monitor object.
  $cm = CampaignMonitor::getConnector();

  // Get lists form campaign monitor (or the local cache).
  $list = $cm->getExtendedList($list_id);
  $list_options = variable_get('campaignmonitor_list_' . $list_id, array());

  // Set options for the form.
  $form = array(
    '#tree' => TRUE,
    '#attributes' => array(
      'class' => array(
        'campaignmonitor-subscribe-form',
        'campaignmonitor-subscribe-form-' . str_replace(' ', '-', strtolower($list['name'])),
      ),
    ),
  );

  // Try to get e-mail address from the user object.
  if ($user->uid != 0) {
    $email = $user->mail;
  }

  // Should the name field be displayed for this user.
  if (isset($list_options['display']['name']) && $list_options['display']['name']) {
    if (!empty($email) && $cm->isSubscribed($list_id, $email)) {
      // If subscribed, get her/his name from campaign monitor.
      $subscriber = $cm->getSubscriber($list_id, $email);
      $name = isset($subscriber['Name']) ? $subscriber['Name'] : $name;
    }

    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#required' => TRUE,
      '#maxlength' => 200,
      '#default_value' => isset($name) ? $name : '',
    );
  }

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#required' => TRUE,
    '#maxlength' => 200,
    '#default_value' => isset($email) ? $email : '',
  );

  foreach ($list['CustomFields'] as $key => $field) {
    // Form API, can't handle keys with [].
    $form_key = str_replace(array('[', ']'), '', $key);

    // Check if field should be displayed.
    if (!$list_options['CustomFields']['selected'][$key]) {
      // Field is not selected, so continue.
      continue;
    }

    switch ($field['DataType']) {
      case 'Text':
        $form['CustomFields'][$form_key] = array(
          '#type' => 'textfield',
          '#title' => check_plain($field['FieldName']),
          '#maxlength' => 200,
          '#default_value' => isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '',
        );
        break;

      case 'MultiSelectOne':
        $options = array();
        foreach ($field['FieldOptions'] as $option) {
          $options[$option] = $option;
        }

        $form['CustomFields'][$form_key] = array(
          '#type' => 'select',
          '#title' => check_plain($field['FieldName']),
          '#options' => $options,
          '#default_value' => isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '',
        );
        break;

      case 'MultiSelectMany':
        $options = array();
        foreach ($field['FieldOptions'] as $option) {
          $options[$option] = $option;
        }

        // If one value was selected, default is a string else an array.
        $cm_default = isset($subscriber['CustomFields'][$field['FieldName']]) ? $subscriber['CustomFields'][$field['FieldName']] : array();
        $is_array = is_array($cm_default); // Exspensive.
        $default = array();
        foreach ($options as $value) {
          if ($is_array) {
            if (in_array($value, $cm_default)) {
              $default[$value] = $value;
            }
          }
          elseif ($cm_default == $value) {
            $default[$cm_default] = $cm_default;
          }
          else {
            $default[$value] = 0;
          }
        }

        $form['CustomFields'][$form_key] = array(
          '#type' => 'checkboxes',
          '#title' => check_plain($field['FieldName']),
          '#options' => $options,
          '#default_value' => $default,
        );
        break;

      case 'Number':
        $form['CustomFields'][$form_key] = array(
          '#type' => 'textfield',
          '#title' => check_plain($field['FieldName']),
          '#default_value' => isset($subscriber['CustomFields']) ? $subscriber['CustomFields'][$field['FieldName']] : '',
        );
        break;
    }
  }

  $form['list_id'] = array(
    '#type' => 'hidden',
    '#value' => $list_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );
  $form['#validate'][] = 'campaignmonitor_subscribe_form_validate';

  return $form;
}

/**
 * Subscribe form validation handler, which calls the API. It's done in the
 * validation handler to provide better user feedback on failure.
 *
 */
function campaignmonitor_subscribe_form_validate($form, &$form_state) {
  // Get a campaign monitor object.
  $cm = CampaignMonitor::getConnector();

  $custom_fields = array();
  if (isset($form_state['values']['CustomFields'])) {
    foreach ($form_state['values']['CustomFields'] as $key => $field) {
      if (is_array($field)) {
        // Filter out non-selected values.
        $field = array_filter($field);
        // Transform two level array into one level.
        foreach ($field as $value) {
          $custom_fields[] = array(
            'Key' => $key,
            'Value' => $value
          );
        }
      }
      else {
        // Add non-array custom fields.
        $custom_fields[] = array(
          'Key' => $key,
          'Value' => $field
        );
      }
    }
  }

  $list_id = $form_state['values']['list_id'];
  $name = isset($form_state['values']['name']) ? check_plain($form_state['values']['name']) : '';
  $email = check_plain($form_state['values']['email']);

  // Update subscriber information or add new subscriber to the list.
  if (!$cm->subscribe($list_id, $email, $name, $custom_fields)) {
    form_set_error('', t('You where not subscribed to the list, please try again later.'));
    return FALSE;
  }

  $lists = $cm->getLists();
  drupal_set_message(t('You are now subscribed to the "@list" list.', array('@list' => $lists[$list_id]['name'])), 'status');
}